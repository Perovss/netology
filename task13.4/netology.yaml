---
# Source: chart/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: netology-chart
  labels:
    helm.sh/chart: chart-0.1.0
    app.kubernetes.io/name: chart
    app.kubernetes.io/instance: netology
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: chart/templates/service_db.yaml
apiVersion: v1
kind: Service
metadata:
  name: netology-chart-db
  labels:
    helm.sh/chart: chart-0.1.0
    app.kubernetes.io/name: chart
    app.kubernetes.io/instance: netology
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
    app: db
spec:
  clusterIP: None
  ports:
    - port: 5432
      protocol: TCP
  selector:
    app.kubernetes.io/name: chart
    app.kubernetes.io/instance: netology
    app: db
---
# Source: chart/templates/service_front.yaml
apiVersion: v1
kind: Service
metadata:
  name: netology-chart-frontend
  labels:
    helm.sh/chart: chart-0.1.0
    app.kubernetes.io/name: chart
    app.kubernetes.io/instance: netology
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
    app: frontend

spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 8000
      protocol: TCP
      name: frontend
  selector:
    app.kubernetes.io/name: chart
    app.kubernetes.io/instance: netology
---
# Source: chart/templates/deployment_back.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: netology-chart-backend
  labels:
    helm.sh/chart: chart-0.1.0
    app.kubernetes.io/name: chart
    app.kubernetes.io/instance: netology
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: chart
      app.kubernetes.io/instance: netology
      app: backend
  template:
    metadata:
      labels:
        app.kubernetes.io/name: chart
        app.kubernetes.io/instance: netology
        app: backend
    spec:
      serviceAccountName: netology-chart
      securityContext:
        {}
      containers:
        - name: chart-backend
          securityContext:
            {}
          image: "perovss/frontend:latest"
          imagePullPolicy: Always
          ports:
            - name: backend
              containerPort: 9000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: 9000
          readinessProbe:
            httpGet:
              path: /
              port: 9000
          resources:
            {}
          env:
            - name: DATABASE_URL
              value: postgres://postgres:postgres@db:5432/news
---
# Source: chart/templates/deployment_front.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: netology-chart-frontend
  labels:
    helm.sh/chart: chart-0.1.0
    app.kubernetes.io/name: chart
    app.kubernetes.io/instance: netology
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: chart
      app.kubernetes.io/instance: netology
      app: frontend
  template:
    metadata:
      labels:
        app.kubernetes.io/name: chart
        app.kubernetes.io/instance: netology
        app: frontend
    spec:
      serviceAccountName: netology-chart
      securityContext:
        {}
      containers:
        - name: chart-frontend
          securityContext:
            {}
          image: "perovss/frontend:lastest"
          imagePullPolicy: Always
          ports:
            - name: frontend
              containerPort: 80
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: 80
          readinessProbe:
            httpGet:
              path: /
              port: 80
          resources:
            {}
          env:
            - name: BASE_URL
              value: http://backend:9000
---
# Source: chart/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: netology-chart-db
  labels:
    helm.sh/chart: chart-0.1.0
    app.kubernetes.io/name: chart
    app.kubernetes.io/instance: netology
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
    app: db
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: chart
      app.kubernetes.io/instance: netology
      app: db
  serviceName: netology-chart-db
  template:
    metadata:
      labels:
        app.kubernetes.io/name: chart
        app.kubernetes.io/instance: netology
        app: db
    spec:
      terminationGracePeriodSeconds: 10
      containers:
        - name: chart-db
          image: "postgres:13-alpine:lastest"
          imagePullPolicy: Always
          ports:
            - containerPort: 5432
              protocol: TCP
          resources:
            {}
          env:
            - name: POSTGRES_DB
              value: news
            - name: POSTGRES_PASSWORD
              value: postgres
            - name: POSTGRES_USER
              value: postgres
---
# Source: chart/templates/ingress.yaml
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: netology-chart
  labels:
    helm.sh/chart: chart-0.1.0
    app.kubernetes.io/name: chart
    app.kubernetes.io/instance: netology
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  rules:
    - host: "netology.example"
      http:
        paths:
          - path: /
            backend:
              serviceName: netology-chart-front
              servicePort: 8000
---
# Source: chart/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "netology-chart-test-connection"
  labels:
    helm.sh/chart: chart-0.1.0
    app.kubernetes.io/name: chart
    app.kubernetes.io/instance: netology
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['netology-chart:']
  restartPolicy: Never
